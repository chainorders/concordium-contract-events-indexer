import {
    BaseAccountTransactionSummary,
    ContractAddress,
    InitContractSummary,
} from '@concordium/node-sdk';

/**
 * Should the listener listen to a particular block?
 * @param blockHash Block Hash
 */
export const shouldProcessBlock = (blockHash: string): boolean => {
    console.log(`filters: Will process block: ${blockHash}`);
    return true;
};

/**
 * Should the listener listen to a particular transaction?
 * @param txnHash Transaction Hash
 */
export const shouldProcessAccountTransaction = (txnHash: string): boolean => {
    console.debug(`filters: Will process transaction:${txnHash}`);
    return true;
};

/**
 * Should process a particular module?
 * @param txn Init Contract Transaction.
 * @returns
 */
export const shouldProcessInitContractTransaction = (
    txn: BaseAccountTransactionSummary & InitContractSummary
): boolean => {
    console.debug(
        `filters: Will process module:${txn.contractInitialized.ref}`
    );

    return true;
};

/**
 * Should process Contract Address. This does not apply to Contract Init Events.
 * @param address Contract Address
 */
export const shouldProcessContract = (address?: ContractAddress): boolean => {
    console.debug(
        `filters: Will process contract: ${address?.index}/${address?.subindex}`
    );

    return !!address;
};

/**
 * Smart Contract Modules and there schema to which the listener will listen to.
 */
export const contractModules: { [ref: string]: { moduleSchema: string } } = {
    // CIS2 Multi
    '83b372c9ef9c5053746a3edefaeea96e45757dd6936f50650dac63dbcdf9505f': {
        moduleSchema:

    },
    // CIS2 Market
    '247a7ac6efd2e46f72fd18741a6d1a0254ec14f95639df37079a576b2033873e': {
        moduleSchema:

    },
};

/**
 * Converts the parsed event to database event.
 * This method is specially needed to convert some of the datatypes which are supported by database.
 * For Example. The Token Amount is serialized as string when parsing the event.
 * In order to perform aggregation over events the amount needs to persisted as a numeric type.
 * @param event Node event parsed from serialized JSON.
 * @returns object thats directly persisted to the database.
 */
export const toDbEvent = (event: Record<string, any>): Record<string, any> => {
    const key = Object.keys(event)[0];

    switch (key) {
        case 'Mint':
            return {
                ...event,
                Mint: {
                    ...event.Mint,
                    amount: parseInt(event.Mint.amount),
                },
            };
        case 'Transfer':
            return {
                ...event,
                Transfer: {
                    ...event.Transfer,
                    amount: parseInt(event.Transfer.amount),
                },
            };
        case 'Burn':
            return {
                ...event,
                Burn: {
                    ...event.Burn,
                    amount: parseInt(event.Burn.amount),
                },
            };
        case 'UpdateOperator':
        case 'TokenMetadata':
        default:
            return event;
    }
};
